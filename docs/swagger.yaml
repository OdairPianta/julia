basePath: /api
definitions:
  enums.UserProfileEnum:
    enum:
    - 10
    - 20
    - 30
    - 40
    type: integer
    x-enum-varnames:
    - UserProfileEnumTeacher
    - UserProfileEnumManager
    - UserProfileEnumSecretary
    - UserProfileEnumAdministrator
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  models.APIMessage:
    properties:
      message:
        type: string
    required:
    - message
    type: object
  models.APIStatus:
    properties:
      status:
        type: string
    required:
    - status
    type: object
  models.File:
    properties:
      created_at:
        type: string
      extension:
        type: string
      id:
        type: integer
      name:
        type: string
      path:
        type: string
      post_id:
        type: integer
      public_url:
        type: string
      updated_at:
        type: string
    required:
    - extension
    - id
    type: object
  models.SampleDetail:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      sample_string:
        type: string
      updated_at:
        type: string
    required:
    - id
    - sample_string
    type: object
  models.SampleItem:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      sample_model_id:
        type: integer
      sample_string:
        type: string
      updated_at:
        type: string
    required:
    - id
    - sample_model_id
    - sample_string
    type: object
  models.SampleModel:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      id:
        type: integer
      sample_date:
        type: string
      sample_detail:
        $ref: '#/definitions/models.SampleDetail'
      sample_detail_id:
        type: integer
      sample_double:
        type: number
      sample_items:
        items:
          $ref: '#/definitions/models.SampleItem'
        type: array
      sample_nullable:
        type: string
      sample_string:
        type: string
      sample_unique:
        type: string
      updated_at:
        type: string
    required:
    - id
    - sample_date
    - sample_detail_id
    - sample_double
    - sample_string
    - sample_unique
    type: object
  models.User:
    properties:
      created_at:
        type: string
      deleted_at:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      email_verified_at:
        type: string
      fcm_token:
        type: string
      id:
        type: integer
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      profile:
        allOf:
        - $ref: '#/definitions/enums.UserProfileEnum'
        description: 10 - Professor, 20 - Gestor, 30 - Secret√°rio, 40 - Administrador
      remember_token:
        type: string
      reset_password_token:
        type: string
      token:
        type: string
      updated_at:
        type: string
    required:
    - id
    - name
    - password
    - profile
    type: object
  requests.CreateSampleModelInput:
    properties:
      sample_date:
        type: string
      sample_detail_id:
        type: integer
      sample_double:
        type: number
      sample_nullable:
        type: string
      sample_string:
        type: string
      sample_unique:
        type: string
    required:
    - sample_date
    - sample_detail_id
    - sample_double
    - sample_string
    - sample_unique
    type: object
  requests.CreateUserInput:
    properties:
      city:
        type: string
      cpf:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      fcm_token:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      profile:
        $ref: '#/definitions/enums.UserProfileEnum'
      remember_token:
        type: string
      school_id:
        type: integer
      state:
        type: string
    required:
    - city
    - cpf
    - date_of_birth
    - email
    - name
    - password
    - profile
    - school_id
    - state
    type: object
  requests.ForgotPasswordInput:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  requests.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  requests.RecoverPasswordInput:
    properties:
      password:
        type: string
      reset_password_token:
        type: string
    required:
    - password
    - reset_password_token
    type: object
  requests.UpdateSampleModelInput:
    properties:
      sample_date:
        type: string
      sample_detail_id:
        type: integer
      sample_double:
        type: number
      sample_nullable:
        type: string
      sample_string:
        type: string
      sample_unique:
        type: string
    required:
    - sample_date
    - sample_detail_id
    - sample_double
    - sample_string
    - sample_unique
    type: object
  requests.UpdateUserFcmTokenInput:
    properties:
      fcm_token:
        type: string
    required:
    - fcm_token
    type: object
  requests.UpdateUserInput:
    properties:
      city:
        type: string
      date_of_birth:
        type: string
      email:
        type: string
      fcm_token:
        type: string
      name:
        type: string
      password:
        type: string
      phone:
        type: string
      profile:
        $ref: '#/definitions/enums.UserProfileEnum'
      remember_token:
        type: string
      reset_password_token:
        type: string
      school_id:
        type: integer
      state:
        type: string
    required:
    - city
    - date_of_birth
    - email
    - name
    - profile
    - school_id
    - state
    type: object
externalDocs:
  description: OpenAPI
  url: https://swagger.io/resources/open-api/
host: api.julia.spotec.app
info:
  contact:
    email: contact@spotec.app
    name: API Support
    url: https://spotec.app/contato/
  description: API of Julia 2
  title: Julia API
  version: 0.7.4
paths:
  /files:
    get:
      consumes:
      - application/json
      description: Get all files
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.File'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Get files
      tags:
      - files
    post:
      consumes:
      - application/json
      description: Create file
      parameters:
      - description: File
        in: body
        name: file
        required: true
        schema:
          $ref: '#/definitions/models.File'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Create file
      tags:
      - files
  /files/{id}:
    delete:
      consumes:
      - application/json
      description: Delete file by id
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Delete file
      tags:
      - files
  /forgot_password:
    post:
      consumes:
      - application/json
      description: Forgot password by json user
      parameters:
      - description: Forgot password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.ForgotPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      summary: Forgot password
      tags:
      - users
  /login:
    post:
      consumes:
      - application/json
      description: Login by json user
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      summary: Login an user
      tags:
      - users
  /recover_password:
    post:
      consumes:
      - application/json
      description: Recover password by json user
      parameters:
      - description: Recover password
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.RecoverPasswordInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      summary: Recover password
      tags:
      - users
  /sample_models:
    post:
      consumes:
      - application/json
      description: add by json sample_model
      parameters:
      - description: Add sample_model
        in: body
        name: sample_model
        required: true
        schema:
          $ref: '#/definitions/requests.CreateSampleModelInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SampleModel'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Add an sample_model
      tags:
      - sample_models
  /sample_models/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by sample_model ID
      parameters:
      - description: ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SampleModel'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Delete an sample_model
      tags:
      - sample_models
    get:
      consumes:
      - application/json
      description: Get sample_model
      parameters:
      - description: SampleModel ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.SampleModel'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Get sample_model
      tags:
      - sample_models
    put:
      consumes:
      - application/json
      description: Update by json sample_model
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update sample_model
        in: body
        name: sample_model
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateSampleModelInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SampleModel'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Update an sample_model
      tags:
      - sample_models
  /sample_models_select:
    get:
      consumes:
      - application/json
      description: Select samples
      parameters:
      - description: Search by sample_string
        in: query
        name: search
        type: string
      - description: Limit the number of results
        in: query
        name: limit
        type: integer
      - description: Offset the results
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/models.SampleModel'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Select samples
      tags:
      - sample_models
  /samples:
    get:
      consumes:
      - application/json
      description: Get samples
      parameters:
      - description: Search by id or sample_string or sample_unique or sample_nullable
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/models.SampleModel'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Get samples
      tags:
      - sample_models
  /status:
    get:
      consumes:
      - application/json
      description: Get api status
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.APIStatus'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      summary: Get api status
      tags:
      - status
  /users:
    get:
      consumes:
      - application/json
      description: Get all users
      parameters:
      - description: Search by name
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/models.User'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: add by json user
      parameters:
      - description: Add user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.CreateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Add an user
      tags:
      - users
  /users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete by user ID
      parameters:
      - description: ID
        format: int64
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Delete an user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Get user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update by json user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Update an user
      tags:
      - users
  /users/{id}/update_fcm_token:
    put:
      consumes:
      - application/json
      description: Update by json user
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Update user fcm token
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/requests.UpdateUserFcmTokenInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Update an user fcm token
      tags:
      - users
  /users_select:
    get:
      consumes:
      - application/json
      description: Select users
      parameters:
      - description: Search by name
        in: query
        name: search
        type: string
      - description: Limit the number of results
        in: query
        name: limit
        type: integer
      - description: Offset the results
        in: query
        name: offset
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: ok
          schema:
            items:
              $ref: '#/definitions/models.SampleModel'
            type: array
        "400":
          description: Bad request
          schema:
            $ref: '#/definitions/models.APIMessage'
        "404":
          description: Not found
          schema:
            $ref: '#/definitions/models.APIMessage'
      security:
      - Bearer: []
      summary: Select users
      tags:
      - users
securityDefinitions:
  Bearer:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
